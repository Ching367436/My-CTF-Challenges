n = 16400315632331228798651160245637077709946595645983122370975720487255045029126019080914087625061267248899481815856032068496677195355930968958933039404838878254571702583236164044329257665923139584497190482539593920989421676801793859957608169304853612529356178808220735296012300840838752536726187014265381091018227259048242335988124815353885629899823075491248167441773206742514209629252834744703076252393620438358963295246939345846897055302950273482632799669053630133257184495989695604890380487747829188856813792192971237277430926939234839131130050521927182546512668619537615809443731995454110736457766239564482146568569
c1 = 9260308961776001335079683654718747572438336903567168746535981974278318855032692759257153885905039055033407711267019200203592646520008269923766644860993585286460218972795739102869180413450809247033955148094601634910003769531729400623580272882744281470035984694302667212894337123556661323801286047326767514816733543248434629207024731122643942813447683242886878459891613277457862276625909854228989326353334163039554280752439404396010310405199334053727561305859387863510287420347413696629789948742849397565150526831633504966603337522623781225477850443651798733768731913977084651549438711390939903065839974506543283853601
c2 = 3838341124347146185537009635910934556178469779002373553278305143442949628667246248904699697189046461545271607443187258200623569418481589903276846078300689162335380032370205154218236235391706951498781295069645180066501006984495957843169430368012207252381191661592641589555594495314449543535092171653001054645090621683300525556639326022928733662028287242708622472787824426908276607425565401148689419922009111812244244421555130922557959672741207221681230927040569391705062109388981993437579326664691670974623157272882496693678269281125308787125436186396370825778048227546419210578184041551817826311141746825731799555383

from Crypto.Util.number import *

def gcd(a, b): 
    while b:
        a, b = b, a % b
    return a.monic()

def franklinreiter(C1, C2, e, N, a, b):
    P.<X> = PolynomialRing(Zmod(N))
    g1 = (a*X + b)^e - C1
    g2 = X^e - C2
    print ("Result")
    result = -gcd(g1, g2).coefficients()[0]
    return int(result)
def starburst(x: int):
    return (x * 0x48763 + 0x74) % n
def starburst_inverse(x: int):
    return (x - 0x74) * inverse(0x48763, n) % n

res = (franklinreiter(c2, c1, 0x487, n, 88092020809, 34429264))
m = starburst_inverse(starburst_inverse(res))

print(long_to_bytes(m))